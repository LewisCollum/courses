#+latex_class_options: [fleqn]
#+latex_header: \usepackage{../homework}

#+title: Project 1: Snake Game
#+author: Lewis Collum
#+date: Updated: \today

* Idea
  - split canvas into grid
  - Snake is just a list of squares
  - Square is just a scaled and rotated radial of size 4.
  - Snake movement is the last square in the snake list translated to
    the "head" position of the snake. This avoids translating every
    square of the snake.
  - Snake square translations are a multiple of the square size. This
    mimics the snake moving in a grid. This makes checking boundary
    conditions easier.

* Needs
  - Bounds checking system for squares
    - Total canvas size / grid spacing = grid index
  - Key Event Dispatcher (key up and key down) stores object key maps
    and calls the maps when event occurs.
* HTML
  #+begin_src html :tangle main.html
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
    <title>2D Shapes</title>
    <script type="text/javascript" src="./Common/webgl-utils.js"></script>
    <script type="text/javascript" src="./Common/initShaders.js"></script>
    <script type="text/javascript" src="./Common/MV.js"></script>
    <script type="text/javascript" src="matrix.js"></script>
    <script type="text/javascript" src="form.js"></script>
    <script type="text/javascript" src="radial.js"></script>
    <script type="text/javascript" src="main.js"></script>
    <script type="text/javascript" src="drawer.js"></script>
    <script type="text/javascript" src="frameEventDispatcher.js"></script>
    
    <script id="vertex-shader" type="x-shader/x-vertex">
      attribute vec4 position;
      uniform mat4 transformation;

      void main() {
        gl_Position = transformation * position;
        gl_PointSize = 1.0;
      }
    </script>
    
    <script id="fragment-shader" type="x-shader/x-fragment">
      precision mediump float;
      uniform vec4 color;
      
      void main() {
        gl_FragColor = color;
      }
    </script>

    <link rel="stylesheet" href="styles.css">

    <h1>SNAKE</h1>
  </head>
  
  <body onload="init()">
    <div class="container">
      <canvas width="512" height="512" id="gl-canvas"></canvas>
      <div id="overlay">
        <div>SCORE: <span id="score"></span></div>
      </div>
    </div>
    <p>W, A, S, D to move. Don't run into yourself and don't go over the edge.</p>
    <h3>Lewis Collum & Justin Marcy</h3>
  </body>
</html>
  #+end_src

* CSS
  #+begin_src css :tangle styles.css
.container {
    text-align:center;
    position: relative;
}

#overlay {
    position: relative;
    left: 0px;
    top: -40px;
    font-family: "Roboto";
    font-size: 20px;
    color: black;
}

body {
    text-align:center;
    background-color: darkslategray;
    font-family: "Roboto";
    color: white;
}

  #+end_src
* JS
  #+begin_src javascript :tangle main.js
//Lewis Collum
var canvas
var gl

function init() {
    canvas = document.getElementById("gl-canvas")
    gl = WebGLUtils.setupWebGL(canvas)

    const shaderProgram = initShaders(gl, "vertex-shader", "fragment-shader")
    gl.useProgram(shaderProgram)
    gl.viewport(0, 0, 512, 512)
    gl.clearColor(0.4, 1.0, 0.4, 1.0)
    gl.clear(gl.COLOR_BUFFER_BIT)

    drawer.setupWithGlAndShaders(gl, shaderProgram)
    drawer.strategy = gl.TRIANGLE_FAN

    const score = document.getElementById("score")
    const scoreText = document.createTextNode("")
    score.appendChild(scoreText)

    var grid = new Grid(15)
    var apple = new Apple(grid)
    var snake = new Snake(grid)

    frameEventDispatcher.addEventListener(() => {
        scoreText.nodeValue = snake.body.length

        if (squareIntersection(snake.body[0].coordinates, apple.coordinates)) {
            apple.eat()
            snake.feed()
            updatePeriod -= 2
        } 
        else if (snake.isOverEdge() || snake.isOverlapping()) {
            window.alert(`Score: ${scoreText.nodeValue}`)
            window.location.reload(false)
        } 
    })
    
    onFrameEvent()
}

var currentMillis = 0
var updatePeriod = 100
function onFrameEvent(millis) {
    if (millis > currentMillis + updatePeriod) {
        currentMillis = millis
        gl.clear(gl.COLOR_BUFFER_BIT)
        frameEventDispatcher.dispatchEvent()
    }
    requestAnimFrame(onFrameEvent)
}

class Snake {
    constructor(grid) {
        this.grid = grid
        this.points = makeSquareOfSize(this.grid.spacing)

        this.drift = matrix.Identity(4)
        this.driftVelocity = this.grid.spacing

        this.body = [{
            points: this.points,
            transformation: matrix.Identity(4),
            color: [0.6, 0.3, 0.0, 1],
            coordinates: [Math.floor(this.grid.count/2), Math.floor(this.grid.count/2)]
        }]
        drawer.addDrawable(this.body[0])  

        frameEventDispatcher.addEventListener(() => this.update())
        
        this.setMovementKeyMap()
    }

    update() {        
        this.body[this.body.length-1].transformation = matrix.dot(this.body[0].transformation, this.drift)
        this.body.unshift(this.body.pop())

        this.body[0].coordinates[0] = Math.floor((this.body[0].transformation[0][3]+1)*this.grid.count/2)
        this.body[0].coordinates[1] = Math.floor((this.body[0].transformation[1][3]+1)*this.grid.count/2)
    }    
    
    moveUp() {this.drift = form.Translate.y(this.driftVelocity)}
    moveDown() {this.drift = form.Translate.y(-this.driftVelocity)}
    moveRight() {this.drift = form.Translate.x(this.driftVelocity)}
    moveLeft() {this.drift = form.Translate.x(-this.driftVelocity)}
    stop() {this.drift = matrix.Identity(4)}

    isOverlapping() {
        var overlapping = false
        this.body.forEach((segment, index) => {
            if (index != 0 && squareIntersection(this.body[0].coordinates, segment.coordinates)) 
                overlapping = true
        })
        return overlapping
    }

    isOverEdge() {
        return this.body[0].coordinates[0] >= this.grid.count ||
            this.body[0].coordinates[0] < 0 ||
            this.body[0].coordinates[1] >= this.grid.count ||
            this.body[0].coordinates[1] < 0
    }

    feed() {
        this.body.push({
            points: this.points,
            transformation: this.body[this.body.length-1].transformation,
            color: [0.6, 0.3, 0.0, 1],
            coordinates: [null, null]
        })

        drawer.addDrawable(this.body[this.body.length-1])            
    }
    
    setMovementKeyMap() {
        this.movementKeyMap = new Proxy({
            ['A']: () => this.moveLeft(),
            ['D']: () => this.moveRight(),
            ['S']: () => this.moveDown(),
            ['W']: () => this.moveUp()
        }, safeIgnoreKeyDownHandler)
        
        document.addEventListener("keydown", (event) => {
            let key = String.fromCharCode(event.keyCode)
            this.movementKeyMap[key]()
        })
    }
}

function makeSquareOfSize(size) {
    return matrix.dotMatrices([
        radial.make2d(4),
        form.Rotate.z(Math.PI/4),
        form.Scale.all(Math.sqrt(2)*size/2)])
}

var safeIgnoreKeyDownHandler = {
    get: function(target, name) {
        if (target.hasOwnProperty(name)) {
            return target[name]
        }
        return () => {}
    }
}

class Grid {
    constructor(count) {
        this.count = count
        this.spacing = 2/count
    }

    randomCoordinates() {
        return [Math.floor(Math.random()*this.count), Math.floor(Math.random()*this.count)]        
    }

    gridToFrameCoordinates(coordinates) {
        return [coordinates[0]*this.spacing-1, coordinates[1]*this.spacing-1]        
    }
}

class Apple {
    constructor(grid) {
        this.grid = grid
        this.points = makeSquareOfSize(this.grid.spacing)
        this.color = [1.0, 0.0, 0.0, 1.0]
        
        this.eat()
        drawer.addDrawable(this)
    }
    
    eat() {
        this.coordinates = this.grid.randomCoordinates()
        const translation = this.grid.gridToFrameCoordinates(this.coordinates)
        this.transformation = form.Translate.each(translation[0]+this.grid.spacing/2, translation[1]+this.grid.spacing/2, 0)
    }
}

function squareIntersection(coordinatesA, coordinatesB) {
    return coordinatesA[0] == coordinatesB[0] && coordinatesA[1] == coordinatesB[1]
}

  #+end_src
* My Library
** Form
    #+begin_src javascript :tangle form.js
const form = {};
(function(context) {
    context.Rotate = class {
        static noZ(radians) {
            return [[Math.cos(radians), -Math.sin(radians), 0, 0],
                    [Math.sin(radians), Math.cos(radians), 0, 0],
                    [0, 0, 1, 0],
                    [0, 0, 0, 1]]
        }

        static x(radians) {
            return [[1, 0, 0, 0],
                    [0, Math.cos(radians), -Math.sin(radians), 0],
                    [0, Math.sin(radians), Math.cos(radians), 0],
                    [0, 0, 0, 1]]
        }

        static y(radians) {
            return [[Math.cos(radians), 0, Math.sin(radians), 0],
                    [0, 1, 0, 0],
                    [-Math.sin(radians), 0, Math.cos(radians), 0],
                    [0, 0, 0, 1]]
        }

        static z(radians) {
            return [[Math.cos(radians), -Math.sin(radians), 0, 0],
                    [Math.sin(radians), Math.cos(radians), 0, 0],
                    [0, 0, 1, 0],
                    [0, 0, 0, 1]]
        }
    }


    context.Translate = class {
        static x(translation) {return this.each(translation, 0, 0)}
        static y(translation) {return this.each(0, translation, 0)}
        static z(translation) {return this.each(0, 0, translation)}
        static all(translation) {return this.each(translation, translation, translation)}
        
        static each(x, y, z) {
            return [[1, 0, 0, x],
                    [0, 1, 0, y],
                    [0, 0, 1, z],
                    [0, 0, 0, 1]]
        }

    }


    context.Scale = class {
        static x(value) {
            return [[value, 0, 0, 0],
                    [0, 1, 0, 0],
                    [0, 0, 1, 0],
                    [0, 0, 0, 1]]
        }

        static y(value) {
            return [[1, 0, 0, 0],
                    [0, value, 0, 0],
                    [0, 0, 1, 0],
                    [0, 0, 0, 1]]
        }

        static y(value) {
            return [[1, 0, 0, 0],
                    [0, 1, 0, 0],
                    [0, 0, value, 0],
                    [0, 0, 0, 1]]
        }
        
        static each(x, y, z) {
            return [[x, 0, 0, 0],
                    [0, y, 0, 0],
                    [0, 0, z, 0],
                    [0, 0, 0, 1]]
        }    
        
        static all(scale) {
            return [[scale, 0, 0, 0],
                    [0, scale, 0, 0],
                    [0, 0, scale, 0],
                    [0, 0, 0, 1]]
        }
    }
})(form)
    #+end_src
** Matrix
   #+begin_src javascript :tangle matrix.js
const matrix = {};
(function(context) {
    context.make = function(rows, columns, fill=null) {
        return Array(rows).fill().map(rows => Array(columns).fill().map(columns => fill))
    }

    context.Identity = function(size) {
        identity = context.make(size, size, 0)
        for (let i = 0; i < size; ++i) 
            identity[i][i] = 1
        return identity        
    }
    
    context.transpose = function(matrix) {
        return matrix[0].map((column, i) => matrix.map(row => row[i]));
    }

    context.negate = function(matrix) {
        return matrix.map(vector => vector.map(element => -element))
    }

    context.column = function(matrix, column) {
        return matrix.map(row => row[column])
    }

    context.snap = function(matrix, threshold) {        
        matrix.forEach((row, rowIndex) => {
            row.forEach((column, columnIndex) => {
                if (column <= threshold) matrix[rowIndex][columnIndex] = 0
            })
        })
        return matrix
    }

    context.dot = function(first, second) {
        var dotted = context.make(first.length, second[0].length)
        matrix.transpose(second).forEach((column, columnIndex) => {
            first.forEach((row, rowIndex) => {
                dotted[rowIndex][columnIndex] = matrix.dotVector(row, column)
            })
        })
        return dotted
    }
    
    context.dotVector = function(first, second) {
        return first.map((value, index) => value * second[index]).reduce((sum, rest) => sum + rest)
    }

    context.dotMatrices = function(matrices) {
        return matrices.reduce((interpolation, rest) => context.dot(interpolation, rest))
    }

    context.add = function(first, second) {
        var result = first.slice()
        for (let row = 0; row < first.length; ++row) {
            for (let column = 0; column < first[0].length; ++column) {
                result[row][column] += second[row][column]
            }
        }
        return result
    }
})(matrix);
   #+end_src
** Radial
   #+begin_src javascript :tangle radial.js
const radial = {};
(function(context) {
    context.make2d = function(pointCount) {
        const vectorAngle = 2 * Math.PI / pointCount
        var points = []
        for (let i = 0; i < pointCount; ++i) {
            let x = Math.cos(vectorAngle * i)
            let y = Math.sin(vectorAngle * i)
            points.push([x, y, 0, 1])
        }
        return points
    }

    //TODO extract functions
    context.make3d = function(yawCount, pitchCount) {
        const stackCount = pitchCount+1
        const yawAngleStep = 2*Math.PI/yawCount
        const pitchAngleStep = Math.PI/stackCount
        var points = []

        points.push([0, 0, -1, 1])
        for (let pitchIndex = 1; pitchIndex < stackCount; ++pitchIndex) {
            let pitch = pitchIndex * pitchAngleStep - Math.PI/2
            
            for (let yawIndex = 0; yawIndex < yawCount; ++yawIndex) {
                let yaw = yawIndex * yawAngleStep
                
                let x = Math.cos(pitch) * Math.cos(yaw)
                let y = Math.cos(pitch) * Math.sin(yaw)
                let z = Math.sin(pitch)

                points.push([x, y, z, 1])
            }
        }
        points.push([0, 0, 1, 1])

        var triangulated = []
        
        //bottom
        for (let yawIndex = 0; yawIndex < yawCount; ++yawIndex) {
            let a = points[0]
            let b = points[1+yawIndex]
            let c = yawIndex == yawCount-1 ? points[1] : points[1+yawIndex+1]
            triangulated.push(a, b, c)
        }

        for (let pitchIndex = 0; pitchIndex < stackCount-2; ++pitchIndex) {
            for (let yawIndex = 0; yawIndex < yawCount; ++yawIndex) {
                var yawStart = pitchIndex*yawCount+1
                var nextYawStart = yawStart+yawCount
                let a = points[yawStart + yawIndex]
                let b = points[nextYawStart + yawIndex]
                let c = (yawIndex == yawCount-1) ? 
                    points[yawStart] :
                    points[yawStart + yawIndex+1]
                let d = (yawIndex == yawCount-1) ?
                    points[nextYawStart] :
                    points[nextYawStart + yawIndex+1]
                
                triangulated.push(a, b, c)
                triangulated.push(c, b, d)
            }
        }

        //top
        for (let yawIndex = 0; yawIndex < yawCount; ++yawIndex) {
            let last = points.length-1
            let lastYawsStart = last-yawCount
            let a = points[last]
            let b = points[last-1-yawIndex]
            let c = yawIndex == yawCount-1 ? points[last-1] : points[last-1-yawIndex-1]
            triangulated.push(a, b, c)
        }
        return triangulated
    }
})(radial);
   #+end_src
** Drawer
   #+begin_src javascript :tangle drawer.js
const drawer = {};
(function(context) {
    context.setupWithGlAndShaders = function(gl, shaderProgram) {
        context.gl = gl
        context.shaderProgram = shaderProgram
        context.strategy = context.gl.TRIANGLE_FAN
        context.drawables = []
        
        frameEventDispatcher.addRenderingListener(() => {
            this.drawAll()
        })
    }

    context.addDrawable = function(drawable) {context.drawables.push(drawable)}
    
    context.drawAll = function() {
        context.drawables.forEach((drawable) => context.draw(drawable))
    }

    context.draw = function(drawable) {
        const transformationPointer = context.gl.getUniformLocation(context.shaderProgram, "transformation")
        context.gl.uniformMatrix4fv(transformationPointer, false, matrix.transpose(drawable.transformation).flat())
        
        const flattenedDrawer = Float32Array.from(drawable.points.flat())
        const pointBuffer = context.gl.createBuffer()
        context.gl.bindBuffer(context.gl.ARRAY_BUFFER, pointBuffer)
        context.gl.bufferData(context.gl.ARRAY_BUFFER, flattenedDrawer, context.gl.STATIC_DRAW)

        const pointPosition = context.gl.getAttribLocation(context.shaderProgram, "position")
        context.gl.vertexAttribPointer(pointPosition, 4, context.gl.FLOAT, false, 0, 0)
        context.gl.enableVertexAttribArray(pointPosition)

        const color = context.gl.getUniformLocation(context.shaderProgram, "color")
        context.gl.uniform4f(color, drawable.color[0], drawable.color[1], drawable.color[2], drawable.color[3])

        const bufferLength = drawable.points.length
        context.gl.drawArrays(context.strategy, 0, bufferLength)
    }
    
})(drawer);
   #+end_src

** FrameEventHandler
   #+begin_src javascript :tangle frameEventDispatcher.js
frameEventDispatcher = {};
(function(context) {
    context.handlers = [] 
    context.renderingHandlers = []

    context.addEventListener = function(listeningFunction) {
        this.handlers.push(listeningFunction)
    }
    
    context.addRenderingListener = function(listeningFunction) {
        this.renderingHandlers.push(listeningFunction)
    }
    
    context.dispatchEvent = function(event) {
        this.handlers.forEach(handler => handler(event))
        this.renderingHandlers.forEach(handler => handler(event))
    }
})(frameEventDispatcher);
   #+end_src
